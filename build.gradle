plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

def versionObj = new Version(major: 0, minor: 5, revision: 0)

group 'com.github.natanbc'
version versionObj.toString()

mainClassName = 'andesite.node.Andesite'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile 'io.vertx:vertx-web:3.5.4'
    
    compile 'space.npstr:Magma:0.8.1'
    compile 'com.sedmelluq:lavaplayer:1.3.10'
    compile 'com.sedmelluq:jda-nas:1.0.6'
    compile 'com.github.shredder121:jda-async-packetprovider:1.3'
    compile 'org.apache.commons:commons-lang3:3.8.1'

    compile 'com.github.singyeong:java-client:5c53983'

    compile 'ch.qos.logback:logback-classic:1.2.3'

    compile 'io.sentry:sentry:1.7.15'
    compile 'io.sentry:sentry-logback:1.7.15'

    compile 'io.prometheus:simpleclient:0.5.0'
    compile 'io.prometheus:simpleclient_hotspot:0.5.0'
    compile 'io.prometheus:simpleclient_httpserver:0.5.0'
    compile 'io.prometheus:simpleclient_logback:0.5.0'
    
    compile 'com.google.code.findbugs:jsr305:3.0.2'
}

shadowJar {
    classifier = null
}

def lint = [
        "auxiliaryclass",
        "cast",
        "deprecation",
        "dep-ann",
        "divzero",
        "empty",
        "exports",
        "fallthrough",
        "finally",
        "module",
        "opens",
        "options",
        "overloads",
        "overrides",
        "path",
        "rawtypes",
        "removal",
        "serial",
        "static",
        "try",
        "unchecked",
        "varargs",
        "preview"
]

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/Version.java'
        filter(ReplaceTokens, tokens: [
                VERSION_MAJOR:    versionObj.major,
                VERSION_MINOR:    versionObj.minor,
                VERSION_REVISION: versionObj.revision,
                COMMIT:           getCommitHash(),
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'Version.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.compilerArgs += ["-Xlint:${lint.join(",")}", "-Werror"]
}

compileTestJava.enabled = false
processTestResources.enabled = false

class Version {
    String major, minor, revision

    String toString() {
        "$major.$minor.$revision"
    }
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}
